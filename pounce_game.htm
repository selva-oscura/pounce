<html>
	<head>
		<title>Pounce</title>
		<style type="text/css">
			body {background-color:white;height:100%;overflow:hidden;margin:0px; padding:0px;}
			form {margin:0; padding:0;}
			#header{background:silver;border:1px solid gray;}
			#header p{margin:9px 3px 8px 5px;}
			svg { vertical-align: top; }
			#playground{margin-top:0px; padding-top: 0px;}
			.left{float:left;}
			.right{float:right;}
			.text_left p{text-align: left;}
			.text_right p{text-align: right;}
			.header_subdiv{margin-left:24px;}
			.score_space{width:80px;}
			#time{width:100px;}
		</style>
		<script type="text/javascript" src="js/jquery-latest.min.js"></script>
		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
	</head>
	<body>
		<div id='header'>
			<div id='scoring' class='right'>
	 			<div class='header_subdiv right'>
					<div class='left text_left'><p> Your High Score: </p></div>
					<div class='right text_right'><p><span id='high_score' class='score_space'>0 points</span></p></div>
				</div>
	 			<div class='header_subdiv right'>
					<div class='left text_left'><p> Score: </p></div>
					<div class='right text_right'><p><span id='score' class='score_space'>0 points</span></p></div>
				</div>
					<!--end of div header_subdiv--> 
				<div class='header_subdiv right'>
					<div class='left text_left'><p> Elapsed Time: </p></div>
					<div class='right text_right'><p><span id='time'>0 seconds</span></p></div>
				</div><!--end of div header_subdiv-->
			</div>
			<div id='difficulty_level' class='left'>
				<form>
					<p>Difficulty Level: 
						<label for="easy">
							<input type="radio" id="easy" name="difficulty_level" value="1"/>
							Easy
						</label>
						<label for="medium">
							<input type="radio" id="medium" name="difficulty_level" value="2" />
							Medium
						</label>
						<label for="hard">
							<input type="radio" id="hard" name="difficulty_level" value="3"/>
							Hard
						</label>
					</p>
				</form>
			</div><!--end of div difficulty_level-->
		</div><!--end of div header-->
		<svg id="playground" xmlns="http://www.w3.org/2000/svg"></svg>
		<script type="text/javascript">
			var obj= document.createElement('select');
			obj.style.width= "80px";

			var browserDimensions={};
			browserDimensions['x']=window.innerWidth;
			browserDimensions['y']=window.innerHeight;

			console.log(browserDimensions['x'], browserDimensions['y']);
		    var targets={};					//target object
		    var difficulty_level=0;			//variables cor calculating scoring/points
		    var max_points=0;
		    var score=0;
		    var high_score=0;
		    var animate;
		    var d;                        	//variables for timed events (d, check_seconds, newest_delete_time, last_delete_time)
		    var check_seconds;
		    var newest_delete_time;
		    var last_delete_time;

			//create svg element
			function makeSVG(tag, attrs) {
		        var el= document.createElementNS('http://www.w3.org/2000/svg', tag);
		        for (var k in attrs)
		        {
		            el.setAttribute(k, attrs[k]);
		        }
		        return el;
		    }

		    //draws a circle
			function drawCircle(cx, cy, r, id, color){
				var playground=d3.select("#playground");
				playground.append("svg:circle").
					attr("cx", cx).
					attr("cy", cy).
					attr("r", r).
					attr("id", id).
					attr("style", "fill: hsla("+color+", 100%, 50%, .8); stroke-width:1; stroke: hsla(0,0%,0%,.5)");
				//attach event listeners to target
				$('#'+id).click(function(){
					deleteTarget(this);
				});
			}

			function deleteTarget(this_target){
				//calculating score points for deleting target
				var d=new Date();
				newest_delete_time=d.getTime();
				if(targets[this_target.id].difficulty_level==1){
					max_points=10;
				}
				else if(targets[this_target.id].difficulty_level==2){
					max_points=12;
				}
				else{
					max_points=15;
				}
				this_points=max_points-Math.floor((newest_delete_time-last_delete_time)/500);
				if(this_points<1){this_points=1;}
				score+=this_points;
				//update score on the board
				if(score==1){document.getElementById('score').innerHTML=score+' point';}
					else{document.getElementById('score').innerHTML=score+' points';}

				//delete image of circle
				d3.select("#"+this_target.id).remove();
				// delete target from the target object
				delete targets[this_target.id];
				var targets_counted=0;
				for(target in targets){
					targets_counted++;
				}
				//when all targets are clicked, stop the clock and update the high score (if warranted)
				if(targets_counted==0){
					clearInterval(check_seconds);
					if(score>high_score){high_score=score;document.getElementById('high_score').innerHTML=high_score+' points';}
				}
				last_delete_time=newest_delete_time;
			}

			//reset the game
			function resetGame(){
				//deleting the targets
				for(target in targets){
					//delete image of circle
					d3.select("#"+targets[target].id).remove();
					//delete target info from targets object
					delete targets[target];
				}
				//resetting the counter (number of targets generated), the time clock, and the points for the game
				counter=1;
				score=0;
				document.getElementById("time").innerHTML="0 seconds";
				document.getElementById('score').innerHTML=score+" points";
			}

			//generate targets
			function generateTargets(difficulty_level){
				//set the start_time for the game to calculate time to deletion of targets
				var d=new Date();
				var start_time=d.getTime();
				last_delete_time=start_time;
				//set total number of targets
				var counter=1;
				var counter_ceiling=12;
				while(counter<=counter_ceiling){				
					//set size (r) and distance travelled per iteration (range) of targets
					var should_save=true;
					if(difficulty_level==1){var r=60;range=6;}
						else if(difficulty_level==2){var r=30;range=8;}
						else{var r=24;range=12;};
					//set colours for targetes
					var color=(counter-1)*(360/counter_ceiling);
					//set locations for targets
					var cx=Math.floor(Math.random()*(browserDimensions['x']-2*r)+r);
					var cy=Math.floor(Math.random()*(playground_height-2*r)+r);
					//set course of targets (a function that uses the range to set total distance per turn)
					var x=Math.floor(Math.random()*range*(Math.pow(-1,Math.floor(Math.random()*2+1))));
					var y=(range-Math.abs(x))*(Math.pow(-1, Math.floor(Math.random()*2+1)));
					// prevent creation of overlapping targets
					if(counter>1){
						for(another_target in targets){
							// check if distance between each target's cx and cy is greater than sum of their radii
							if(Math.pow((cx-targets[another_target].cx), 2)+Math.pow((cy-targets[another_target].cy), 2)<Math.pow((r+targets[another_target].r), 2)){
								var should_save=false;
							}
						}
					}
					if(should_save===true){
						var course={
							x:x,
							y:y
						};
						var id="target_"+counter;
						targets[id]={cx:cx, cy:cy, r:r, id:id, class:'target', difficulty_level:difficulty_level, color:color, course:course};
						drawCircle(cx, cy, r, id, color);
						counter++;							
					}
				}
				//clear out setIntervals from previous rounds
				clearInterval(animate);
				clearInterval(check_seconds);
				//start the setIntervals for the circle animations and the time clock
				animateCircles();
				runTimer(start_time);
			}

			function animateCircles(){
				//set frequency of redrawing of circles
				var speed=60;
				//setInterval function for animating the circles
				animate=setInterval(function(){moveTargets(targets, speed)}, speed);
			}

			function runTimer(start_time)
			{
				// get time and calculate total elapsed time since beginning of game
				check_seconds=setInterval(function(){
					var d=new Date; 
					current_time=d.getTime(); 
					elapsed_time=Math.floor((current_time-start_time)/1000); 
					if(elapsed_time==1){
						document.getElementById("time").innerHTML=elapsed_time+" second"
					}
					else{
						document.getElementById("time").innerHTML=elapsed_time+" seconds"
					}
				}, 1000);
			}

			function moveTargets(targets, speed){
				for(target in targets){
					//check for collision with another target
					for(another_target in targets){
						if(targets[another_target].id!=targets[target].id){
							// check if distance between each target's cx and cy is less than sum of their radii
							if(Math.pow((targets[target].cx-targets[another_target].cx), 2)+Math.pow((targets[target].cy-targets[another_target].cy), 2)<Math.pow((targets[target].r+targets[another_target].r), 2)){
								//log the collision
								console.log('Collision: ' + targets[target].id + ' at ' + targets[target].cx + ', ' + targets[target].cy 
									+ ' and ' + targets[another_target].id + ' at ' + targets[another_target].cx + ', '+ targets[another_target].cy
									+ ' are ' + Math.sqrt(Math.pow((targets[target].cx-targets[another_target].cx), 2)+Math.pow((targets[target].cy-targets[another_target].cy), 2)) + ' apart and radii sum is ' + (targets[target].r+targets[another_target].r));
								console.log(targets[target].id + "'s original trajectory: " + targets[target].course.x + ", " + targets[target].course.y);
								console.log(targets[another_target].id + "'s original trajectory: " + targets[another_target].course.x + ", " + targets[another_target].course.y);
								//exchange the courses
								var temp_course_x=targets[target].course.x;
								var temp_course_y=targets[target].course.y;
								targets[target].course.x=targets[another_target].course.x;
								targets[target].course.y=targets[another_target].course.y;
								targets[another_target].course.x=temp_course_x;
								targets[another_target].course.y=temp_course_y;
								console.log(targets[target].id + "'s new trajectory: " + targets[target].course.x + ", " + targets[target].course.y);
								console.log(targets[another_target].id + "'s new trajectory: " + targets[another_target].course.x + ", " + targets[another_target].course.y);
					//updated location of target's center (cx, cy) sent to d3 for animation over duration speed
					d3.select("#"+targets[target].id).transition().duration(speed).attr("cx", targets[target].cx).attr("cy", targets[target].cy);
					//updated location of other target in the collision's center (cx, cy) sent to d3 for animation over duration speed
					// d3.select("#"+targets[another_target].id).transition().duration(speed).attr("cx", targets[target].cx).attr("cy", targets[target].cy);


							}
						}
					}
					//check circle location and dimensions and verify wall locations in order to check if the target is hitting a wall
					var min_y=0+targets[target].r;
					var min_x=0+targets[target].r;
					var max_x=browserDimensions['x']-targets[target].r;
					var max_y=playground_height-targets[target].r;
					//change x trajectory and location if the target hits the left or right wall
					if(targets[target].cx+targets[target].course.x<=min_x){			//for the left wall
						targets[target].cx=min_x;
						targets[target].course.x=-targets[target].course.x;
					}
					else if(targets[target].cx+targets[target].course.x>=max_x){	//for the right wall
						targets[target].cx=max_x;
						targets[target].course.x=-targets[target].course.x;

					}
					//update x location if not hitting a left or right wall
					else{
						targets[target].cx=targets[target].cx+targets[target].course.x;  
					}
					//change y trajectory and location if the target hits the top or bottom wall
					if(targets[target].cy+targets[target].course.y<=min_y){			//for the top wall
						targets[target].cy=min_y;
						targets[target].course.y=-targets[target].course.y;
					}
					else if(targets[target].cy+targets[target].course.y>=max_y){	//for the bottom wall
						targets[target].cy=max_y;
						targets[target].course.y=-targets[target].course.y;
					}
					//update y location if didn't hit top or bottom wall
					else{
						targets[target].cy=targets[target].cy+targets[target].course.y;
					}
					//updated location of target's center (cx, cy) sent to d3 for animation over duration speed
					d3.select("#"+targets[target].id).transition().duration(speed).attr("cx", targets[target].cx).attr("cy", targets[target].cy);
				}
			}

			//set header's height
			if(browserDimensions['x']<807){
				header_height = 76;
			}
			else{
				header_height = 40;
			}
			var header = document.getElementById("header");
			$(header)
				.css("height", header_height-2);
			playground_height = window.innerHeight - header_height;


			//set svg element playground's height
			var sandbox=document.getElementById("playground");
			$(sandbox)
				.css("height", playground_height)
				.css("width", browserDimensions['x']);

			//set difficulty level
			$(document).ready(function() {
				$('#easy').click(function(){
					resetGame();
					var difficulty_level=1;
					generateTargets(difficulty_level);
				});
				$('#medium').click(function(){
					resetGame();
					var difficulty_level=2;
					generateTargets(difficulty_level);
				});
				$('#hard').click(function(){
					resetGame();
					var difficulty_level=3;
					generateTargets(difficulty_level);
				});
			});

			//checking location of clicks vis-a-vis target centers as part of the deveoopment process
				// document.onclick = function(e){
				// 	console.log('clicked on', e.x, e.y);
				// }
		</script>
	</body>
</html>